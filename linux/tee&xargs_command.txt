The tee command in Unix-like operating systems reads from standard input and writes to both standard output and one or more files simultaneously. This command is useful for logging or saving the output of a command while still displaying it on the screen.

Hereâ€™s a detailed explanation of the tee command with examples:

command | tee [options] [file...]
Common Options
-a or --append: Append the output to the file(s) rather than overwriting them.
-i or --ignore-interrupts: Ignore interrupt signals.
Examples
Basic Usage

Display the output of a command and write it to a file:
echo "Hello, World!" | tee output.txt
This command will print "Hello, World!" to the terminal and save it to output.txt.

Appending to a File

Append the output to an existing file instead of overwriting it:

echo "Hello, again!" | tee -a output.txt
This will append "Hello, again!" to output.txt.

Ignoring Interrupts

Writing to Multiple Files

Write the output to multiple files:

echo "Hello, multiple files!" | tee file1.txt file2.txt
This will save the output to both file1.txt and file2.txt.

Using with a Pipeline

Use tee within a pipeline to log intermediate outputs:

cat file.txt | grep "pattern" | tee filtered.txt | wc -l
Here, grep "pattern" filters lines containing "pattern" from file.txt, tee writes the filtered lines to filtered.txt, and wc -l counts the number of matching lines.

xargs command
The xargs command in Linux is used to build and execute command lines from standard input. It reads items from standard input, typically output from another command, and executes a specified command with those items as arguments. This is particularly useful for working with commands that don't accept standard input directly or to manage large sets of arguments.


xargs [options] [command [initial-arguments]]
Common Options
-n N: Use at most N arguments per command line.
-P N: Run up to N commands in parallel.
-I replace-str: Replace occurrences of replace-str in the initial arguments with input.
-d delimiter: Specify a delimiter other than whitespace.
--max-args=N or -n N: Use at most N arguments per command line.
Examples
Basic Usage

Pass the output of echo to the ls command:

echo "file1.txt file2.txt" | xargs ls
This will run ls file1.txt file2.txt.

With Find

Delete all .txt files found by find:

find . -name "*.txt" -print | xargs rm
This command finds all .txt files starting from the current directory and deletes them.

Using -n Option

Specify the number of arguments per command line:

echo "1 2 3 4 5 6" | xargs -n 2
This runs the command with at most 2 arguments per line, resulting in:


Using -P Option

Run commands in parallel:

echo "file1 file2 file3 file4" | xargs -n 1 -P 2 cp {} /backup
This copies each file to /backup, running up to 2 copy commands in parallel.

Using -I Option

Replace a placeholder string:

echo "file1 file2" | xargs -I {} mv {} {}.bak
This renames file1 to file1.bak and file2 to file2.bak.

Using Delimiter Option

Specify a custom delimiter:
echo "apple,banana,orange" | xargs -d ',' echo


